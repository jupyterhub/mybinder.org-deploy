binderhub:
  extraConfig:
    bans: |
        c.GitHubRepoProvider.banned_specs = [
          '^ds-100/textbook.*',
          '^samlau95/nbinteract-image.*'
        ]
  service:
    type: ClusterIP

  cors: &cors
    allowOrigin: "*"

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    https:
      enabled: true
      type: "kube-lego"

  registry:
    enabled: true

  dind:
    enabled: true
    initContainers:
      # Only block access to metadata service, do not throttle network
      # egress yet, since that slows down image pushing
      - name: block-metadata
        image: minrk/tc-init:0.0.4
        # Block access to GCE Metadata Service from user pods!
        command:
          - iptables
          - -A
          - OUTPUT
          - -p
          - tcp
          - --dport
          - "80"
          - -d
          - 169.254.169.254
          - -j
          - DROP
        securityContext:
          # capabilities.add seems to be disabled
          # by the `runAsUser: 1000` in the pod-level securityContext
          # unless we explicitly run as root
          runAsUser: 0
          capabilities:
            add:
            - NET_ADMIN

  jupyterhub:
    cull:
      timeout: 600
    hub:
      extraConfigMap:
        cors: *cors
    proxy:
      service:
        type: ClusterIP
      chp:
        cmd:
          - configurable-http-proxy
          - --ip=0.0.0.0
          - --port=8000
          - --api-ip=0.0.0.0
          - --api-port=8001
          - --default-target=http://$(HUB_SERVICE_HOST):$(HUB_SERVICE_PORT)
          - --error-target=http://$(HUB_SERVICE_HOST):$(HUB_SERVICE_PORT)
          - --log-level=error
    ingress:
      enabled: true
      annotations:
        ingress.kubernetes.io/proxy-body-size: 64m
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: "true"
    singleuser:
      initContainers:
      - name: tc-init
        image: minrk/tc-init:0.0.4
        env:
          - name: WHITELIST_CIDR
            value: 10.0.0.0/8
          - name: EGRESS_BANDWIDTH
            value: 1mbit
        securityContext:
          # capabilities.add seems to be disabled
          # by the `runAsUser: 1000` in the pod-level securityContext
          # unless we explicitly run as root
          runAsUser: 0
          capabilities:
            add:
            - NET_ADMIN
      schedulerStrategy: pack
  repo2dockerImage: jupyter/repo2docker:f069a7b
  perRepoQuota: 200

playground:
  image:
    name: yuvipanda/play.nteract.io
    tag: v0.2
  replicas: 1

nginx-ingress:
  rbac:
    create: true
  statsExporter:
    service:
      annotations:
        prometheus.io/scrape: "true"
  controller:
    replicaCount: 5
    scope:
      enabled: true
    config:
      # Allow POSTs of upto 64MB, for large notebook support.
      proxy-body-size: 64m
    stats:
      enabled: true
    service:
      # Preserve client IPs
      externalTrafficPolicy: Local

static:
  paths:
    - /badge.svg

kube-lego:
  config:
    LEGO_EMAIL: yuvipanda@gmail.com
    LEGO_URL: https://acme-v01.api.letsencrypt.org/directory
  rbac:
    create: true

grafana:
  server:
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: "true"
  serverConfigFile:
    grafana.ini: |
      ; instance_name = ${HOSTNAME}
      [paths]
      data = /var/lib/grafana/data
      logs = /var/log/grafana
      plugins = /var/lib/grafana/plugins

      [snapshots]
      external_enabled = true
      external_snapshot_url = https://snapshots-origin.raintank.io
      external_snapshot_name = Publish to snapshot.raintank.io

      [users]
      ;allow_sign_up = true
      ;allow_org_create = true
      ;auto_assign_org = true
      ;auto_assign_org_role = Viewer
      ;login_hint = email or username
      ;default_theme = dark

      [auth.anonymous]
      enabled = true
      org_name = Main Org.
      org_role = Viewer

      [log]
      mode = console
      level = info

      [dashboards.json]
      enabled = true
      path = /var/lib/grafana/dashboards

      [grafana_net]
      url = https://grafana.net

      [smtp]
      enabled = true


prometheus:
  nodeExporter:
    updateStrategy:
      type: RollingUpdate
  alertmanager:
    enabled: false
  pushgateway:
    enabled: false
  rbac:
    create: true
  server:
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: "true"

proxyPatches:
  enabled: true
  interval: 60
  routes:
    "/user": "service:proxy-patches"
