name: Lint and Validate helm chart

on:
  push:
    paths:
      - "**/*.yaml"
      - "**/*.yml"

env:
  HELM_VERSION: "v2.16.3"

jobs:
  yamllint-raw:
    runs-on: ubuntu-16.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install yamllint

      # We use --no-warnings in this step to reduce output to critical errors
      - name: Run yamllint on config/
        run: |
          yamllint -d scripts/yamllint-config.yaml --no-warnings config/

      - name: Unlock git-crypt secrets
        if: github.repository == 'jupyterhub/mybinder.org-deploy'
        uses: sliteteam/github-action-git-crypt-unlock@a09ea5079c1b0e1887d4c8d7a4b20f00b5c2d06b
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      # We use --no-warnings in this step to reduce output to critical errors
      - name: Run yamllint on secrets/config
        if: github.repository == 'jupyterhub/mybinder.org-deploy'
        run: |
          yamllint -d scripts/yamllint-config.yaml --no-warnings secrets/config/

  yamllint-templates:
    if: github.repository == 'jupyterhub/mybinder.org-deploy'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        release: ["staging", "prod", "ovh", "turing"]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install yamllint chartpress

      - name: Install kubeval
        run: |
          curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar --directory ${HOME} --extract --gzip --file -
          sudo mv ${HOME}/kubeval /usr/local/bin

      - name: Install helm
        run: |
          curl -L https://storage.googleapis.com/kubernetes-helm/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz | tar --directory ${HOME} --extract --gzip --file -
          sudo mv ${HOME}/linux-amd64/helm /usr/local/bin/helm

      - name: Install local charts
        working-directory: mybinder
        run: |
          helm init --client-only
          helm dep up

      - name: Unlock git-crypt secrets
        uses: sliteteam/github-action-git-crypt-unlock@a09ea5079c1b0e1887d4c8d7a4b20f00b5c2d06b
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      - name: Run chartpress
        run: |
          chartpress

      - name: Make output directory for helm template
        run: |
          mkdir helm-${{ matrix.release }}

      - name: Run helm template for ${{ matrix.release }}
        run: |
          helm template mybinder \
          -f secrets/config/common.yaml \
          -f config/${{ matrix.release }}.yaml \
          -f secrets/config/${{ matrix.release }}.yaml \
          --output-dir helm-${{ matrix.release }}

      # We use --no-warnings in this step to reduce output to critical errors
      - name: Run yamllint on ${{ matrix.release }} chart
        run: |
          yamllint -d scripts/yamllint-config.yaml --no-warnings helm-${{ matrix.release }}

      # Use --ignore-missing-schemas to avoid failure of CRDs
      - name: Validate k8s resources for ${{ matrix.release}}
        run: |
          kubeval --strict --ignore-missing-schemas -d helm-${{ matrix.release }}
